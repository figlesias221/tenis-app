---
import type { LiveMatches } from "@/lib/api/types";
import MatchListItem from "./MatchListItem.astro";
import StatisticsSummary from "./StatisticsSummary.astro";

export interface Props {
  matches: LiveMatches;
  title: string;
}

const { matches } = Astro.props;

// Group matches by status
const groupedMatches = {
  live: matches.matches.filter(m => m.status === 'live'),
  scheduled: matches.matches.filter(m => m.status === 'scheduled'),
  completed: matches.matches.filter(m => m.status === 'completed')
};

// Helper function to detect doubles matches
function isDoublesMatch(match: any): boolean {
  // Check if match round contains "Doubles" or if tournament name contains "Doubles"
  return match.round?.toLowerCase().includes('doubles') ||
         match.tournament?.name?.toLowerCase().includes('doubles') ||
         match.event?.name?.toLowerCase().includes('doubles');
}


// Current date for header
const today = new Date().toLocaleDateString('en-US', {
  weekday: 'long',
  day: 'numeric',
  month: 'short'
});
---

<div class="space-y-6">
  <!-- Date and status navigation -->
  <!-- Offset for global header (h-16 = 4rem) -->
  <header class="bg-surface-50/95 dark:bg-surface-900/95 backdrop-blur-lg border-b border-surface-200/50 dark:border-surface-700/50 sticky top-16 z-40">
    <div class="flex items-center justify-between py-3 px-4 relative min-h-[48px]">
      <!-- Left navigation -->
      <button id="date-prev" class="flex-shrink-0 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white disabled:opacity-50 disabled:cursor-not-allowed" title="Previous day">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
      </button>

      <!-- Center content -->
      <div class="flex items-center justify-center gap-1 flex-1 px-2 overflow-hidden min-w-0">
        <div id="date-display" class="bg-surface-200 dark:bg-surface-700 px-2 py-1 rounded text-surface-900 dark:text-surface-50 text-xs font-medium flex-shrink-0">
          {today}
        </div>
        {groupedMatches.live.length > 0 && (
          <div class="flex items-center gap-1 bg-red-100 dark:bg-red-900/50 text-red-800 dark:text-red-200 px-1.5 py-1 rounded-full font-medium text-xs flex-shrink-0">
            <div class="w-1.5 h-1.5 bg-red-500 rounded-full animate-pulse"></div>
            <span class="hidden">Live</span>
            <span>({groupedMatches.live.length})</span>
          </div>
        )}
      </div>

      <!-- Right navigation -->
      <button id="date-next" class="flex-shrink-0 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white disabled:opacity-50 disabled:cursor-not-allowed" title="Next day">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>
    </div>
  </header>

  <!-- Statistics Summary -->
  {matches.matches.length > 0 && (
    <div class="mb-6">
      <StatisticsSummary matches={matches} />
    </div>
  )}

  <!-- Filter Controls -->
  {matches.matches.length > 0 && (
    <div class="bg-surface-50 dark:bg-surface-900 border-b border-surface-200 dark:border-surface-700 p-4">
      <div class="flex flex-wrap gap-3">
        <!-- Match Type Filters -->
        <div class="flex gap-2">
          <button id="filter-all" class="filter-btn filter-active px-3 py-2 text-xs font-medium rounded-lg transition-all duration-200 bg-tennis-500 text-white">
            All
          </button>
          <button id="filter-singles" class="filter-btn px-3 py-2 text-xs font-medium rounded-lg transition-all duration-200 bg-surface-200 dark:bg-surface-700 text-surface-700 dark:text-surface-300 hover:bg-surface-300 dark:hover:bg-surface-600">
            Singles
          </button>
          <button id="filter-doubles" class="filter-btn px-3 py-2 text-xs font-medium rounded-lg transition-all duration-200 bg-surface-200 dark:bg-surface-700 text-surface-700 dark:text-surface-300 hover:bg-surface-300 dark:hover:bg-surface-600">
            Doubles
          </button>
        </div>

        <!-- Tournament Category Filters -->
        <div class="flex gap-2">
          <button id="filter-atp" class="filter-btn px-3 py-2 text-xs font-medium rounded-lg transition-all duration-200 bg-surface-200 dark:bg-surface-700 text-surface-700 dark:text-surface-300 hover:bg-surface-300 dark:hover:bg-surface-600">
            ATP
          </button>
          <button id="filter-wta" class="filter-btn px-3 py-2 text-xs font-medium rounded-lg transition-all duration-200 bg-surface-200 dark:bg-surface-700 text-surface-700 dark:text-surface-300 hover:bg-surface-300 dark:hover:bg-surface-600">
            WTA
          </button>
          <button id="filter-challenger" class="filter-btn px-3 py-2 text-xs font-medium rounded-lg transition-all duration-200 bg-surface-200 dark:bg-surface-700 text-surface-700 dark:text-surface-300 hover:bg-surface-300 dark:hover:bg-surface-600">
            Challenger
          </button>
        </div>
      </div>
    </div>
  )}

  <!-- Matches list -->
  <main class="bg-white dark:bg-gray-900">
    <!-- Tournament Sections -->
    {matches.matches.length > 0 ? (
      <div class="divide-y divide-gray-200 dark:divide-gray-700">
        <!-- Group by tournament for better organization -->
        {Array.from(new Set(matches.matches.map(m => m.tournament.name))).map(tournamentName => {
          const tournamentMatches = matches.matches.filter(m => m.tournament.name === tournamentName);
          const tournament = tournamentMatches[0].tournament;
          const liveMatchesInTournament = tournamentMatches.filter(m => m.status === 'live');

          // Detect if this is primarily a doubles tournament
          const doublesMatches = tournamentMatches.filter(m => isDoublesMatch(m));
          const isPrimarilyDoubles = doublesMatches.length > tournamentMatches.length / 2;
          const matchType = isPrimarilyDoubles ? 'Doubles' : tournament.category;

          return (
            <section class="tournament-section bg-white dark:bg-gray-900" data-tournament={tournament.name} data-category={tournament.category} data-match-type={matchType}>
              <!-- Tournament header -->
              <!-- Offset below date header (approx 7rem total to avoid overlap) -->
              <div class="bg-gray-50 dark:bg-gray-800/50 px-4 py-3 sticky top-28 z-30 border-b border-gray-200 dark:border-gray-700">
                <div class="flex items-center justify-between">
                  <div class="flex items-center gap-2 min-w-0 flex-1">
                    {liveMatchesInTournament.length > 0 && (
                      <span class="text-xs bg-red-100 dark:bg-red-900/50 text-red-800 dark:text-red-200 px-2 py-1 rounded-full font-medium flex-shrink-0">
                        LIVE
                      </span>
                    )}
                    <span class="text-sm font-medium text-gray-900 dark:text-gray-100 truncate">{tournament.name}</span>
                    <span class={`text-xs px-2 py-1 rounded-full font-medium flex-shrink-0 ${
                      tournament.category === 'ATP'
                        ? 'bg-blue-100 dark:bg-blue-900/50 text-blue-800 dark:text-blue-200'
                        : tournament.category === 'WTA'
                        ? 'bg-pink-100 dark:bg-pink-900/50 text-pink-800 dark:text-pink-200'
                        : tournament.category === 'Challenger'
                        ? 'bg-orange-100 dark:bg-orange-900/50 text-orange-800 dark:text-orange-200'
                        : 'bg-green-100 dark:bg-green-900/50 text-green-800 dark:text-green-200'
                    }`}>
                      {tournament.category}
                    </span>
                    {isPrimarilyDoubles && (
                      <span class="text-xs px-2 py-1 rounded-full font-medium flex-shrink-0 bg-purple-100 dark:bg-purple-900/50 text-purple-800 dark:text-purple-200">
                        Doubles
                      </span>
                    )}
                  </div>
                  <div class="flex items-center gap-1 text-xs text-gray-500 dark:text-gray-400 flex-shrink-0 ml-2">
                    <span class="hidden sm:inline">{tournament.location}</span>
                    <span class="hidden sm:inline">â€¢</span>
                    <span class="capitalize text-xs">{tournament.surface}</span>
                  </div>
                </div>
              </div>

              <!-- Tournament matches -->
              <div class="space-y-2 p-4">
                {tournamentMatches.map(match => (
                  <MatchListItem match={match} />
                ))}
              </div>
            </section>
          );
        })}
      </div>
    ) : (
      <!-- Enhanced empty state -->
      <div class="flex flex-col items-center justify-center py-16 text-center px-4">
        <div class="text-6xl mb-4">ðŸŽ¾</div>
        {groupedMatches.live.length === 0 && groupedMatches.scheduled.length === 0 && groupedMatches.completed.length === 0 ? (
          <>
            <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">No matches today</h3>
            <p class="text-gray-500 dark:text-gray-400 text-sm mb-4">Check back tomorrow for upcoming tournaments</p>
            <div class="flex flex-col sm:flex-row gap-2">
              <a
                href="/rankings"
                class="inline-flex items-center px-4 py-2 bg-yellow-500 hover:bg-yellow-600 text-white rounded-lg font-medium transition-colors"
              >
                View Rankings
              </a>
              <a
                href="/competitions"
                class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-lg font-medium transition-colors"
              >
                Browse Tournaments
              </a>
            </div>
          </>
        ) : (
          <>
            <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">No live matches right now</h3>
            <p class="text-gray-500 dark:text-gray-400 text-sm mb-4">
              {groupedMatches.scheduled.length > 0
                ? `${groupedMatches.scheduled.length} matches scheduled for today`
                : `${groupedMatches.completed.length} matches completed today`
              }
            </p>
            <button
              onclick="window.location.reload()"
              class="inline-flex items-center px-4 py-2 bg-yellow-500 hover:bg-yellow-600 text-white rounded-lg font-medium transition-colors"
            >
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
              </svg>
              Refresh Scores
            </button>
          </>
        )}
      </div>
    )}
  </main>
</div>

<script>
  // Date navigation functionality
  let currentDate = new Date().toISOString().split('T')[0];
  let isLoading = false;

  function formatDateForDisplay(dateStr: string) {
    const date = new Date(dateStr);
    return date.toLocaleDateString('en-US', {
      weekday: 'long',
      day: 'numeric',
      month: 'short'
    });
  }

  function updateDateDisplay(dateStr: string) {
    const displayElement = document.getElementById('date-display');
    if (displayElement) {
      displayElement.textContent = formatDateForDisplay(dateStr);
    }
    // Disable the "next" button when at today's date
    const nextBtn = document.getElementById('date-next') as HTMLButtonElement | null;
    if (nextBtn) {
      const todayStr = new Date().toISOString().split('T')[0];
      const isToday = dateStr === todayStr;
      nextBtn.disabled = isToday;
      nextBtn.setAttribute('aria-disabled', String(isToday));
      nextBtn.title = isToday ? 'Already at today' : 'Next day';
    }
  }

  function setLoading(loading: boolean) {
    isLoading = loading;
    const prevBtn = document.getElementById('date-prev') as HTMLButtonElement;
    const nextBtn = document.getElementById('date-next') as HTMLButtonElement;

    if (prevBtn) prevBtn.disabled = loading;
    if (nextBtn) nextBtn.disabled = loading;

    if (loading) {
      // Show loading indicator
      showLoadingIndicator('Loading matches...');
    } else {
      hideLoadingIndicator();
    }
  }

  function showLoadingIndicator(message: string) {
    let indicator = document.getElementById('loading-indicator');
    if (!indicator) {
      indicator = document.createElement('div');
      indicator.id = 'loading-indicator';
      indicator.className = 'fixed top-4 right-4 bg-yellow-500 text-white px-3 py-2 rounded-lg text-sm font-medium z-50 animate-pulse';
      document.body.appendChild(indicator);
    }
    indicator.textContent = message;
    indicator.style.display = 'block';
  }

  function hideLoadingIndicator() {
    const indicator = document.getElementById('loading-indicator');
    if (indicator) {
      indicator.style.display = 'none';
    }
  }

  async function loadMatchesForDate(dateStr: string) {
    if (isLoading) return;
    setLoading(true);
    try {
      // Build target URL for the current page with the new date param
      const url = new URL(window.location.href);
      const todayStr = new Date().toISOString().split('T')[0];
      if (dateStr === todayStr) {
        url.searchParams.delete('date');
      } else {
        url.searchParams.set('date', dateStr);
      }

      // Fetch the rendered page HTML for that date
      const resp = await fetch(url.toString(), { credentials: 'same-origin' });
      if (!resp.ok) throw new Error(`Failed to fetch page: ${resp.statusText}`);
      const html = await resp.text();

      // Swap the main content
      const parser = new DOMParser();
      const newDoc = parser.parseFromString(html, 'text/html');
      const newMain = newDoc.querySelector('main');
      const currentMain = document.querySelector('main');
      if (newMain && currentMain) {
        currentMain.innerHTML = newMain.innerHTML;
        window.scrollTo({ top: 0, behavior: 'smooth' });
      }

      // Update state and URL
      currentDate = dateStr;
      updateDateDisplay(dateStr);
      history.pushState(null, '', url);
    } catch (error) {
      console.error('Error loading matches:', error);
      showLoadingIndicator('Failed to load matches');
      setTimeout(hideLoadingIndicator, 3000);
    } finally {
      setLoading(false);
    }
  }

  // (Removed) Previously used to inject JSON results into DOM

  // Filter functionality
  let activeFilters = new Set(['all']);

  function updateFilterButtonState(button: HTMLElement, isActive: boolean) {
    if (isActive) {
      button.classList.remove('bg-surface-200', 'dark:bg-surface-700', 'text-surface-700', 'dark:text-surface-300');
      button.classList.add('bg-tennis-500', 'text-white', 'filter-active');
    } else {
      button.classList.remove('bg-tennis-500', 'text-white', 'filter-active');
      button.classList.add('bg-surface-200', 'dark:bg-surface-700', 'text-surface-700', 'dark:text-surface-300');
    }
  }

  function applyFilters() {
    const tournamentSections = document.querySelectorAll('.tournament-section');

    tournamentSections.forEach(section => {
      const category = section.getAttribute('data-category');
      const matchType = section.getAttribute('data-match-type');

      let shouldShow = false;

      if (activeFilters.has('all')) {
        shouldShow = true;
      } else {
        // Check if any active filter matches this section
        if (activeFilters.has('singles') && matchType !== 'Doubles') {
          shouldShow = true;
        }
        if (activeFilters.has('doubles') && matchType === 'Doubles') {
          shouldShow = true;
        }
        if (activeFilters.has('atp') && category === 'ATP') {
          shouldShow = true;
        }
        if (activeFilters.has('wta') && category === 'WTA') {
          shouldShow = true;
        }
        if (activeFilters.has('challenger') && category === 'Challenger') {
          shouldShow = true;
        }
      }

      (section as HTMLElement).style.display = shouldShow ? 'block' : 'none';
    });
  }

  function handleFilterClick(filterId: string) {
    const button = document.getElementById(`filter-${filterId}`);
    if (!button) return;

    if (filterId === 'all') {
      // Clear all filters and activate 'all'
      activeFilters.clear();
      activeFilters.add('all');

      // Update all button states
      document.querySelectorAll('.filter-btn').forEach(btn => {
        updateFilterButtonState(btn as HTMLElement, btn.id === 'filter-all');
      });
    } else {
      // Remove 'all' if it's active
      activeFilters.delete('all');

      // Toggle the clicked filter
      if (activeFilters.has(filterId)) {
        activeFilters.delete(filterId);
      } else {
        activeFilters.add(filterId);
      }

      // If no filters are active, activate 'all'
      if (activeFilters.size === 0) {
        activeFilters.add('all');
      }

      // Update button states
      document.querySelectorAll('.filter-btn').forEach(btn => {
        const btnFilterId = btn.id.replace('filter-', '');
        updateFilterButtonState(btn as HTMLElement, activeFilters.has(btnFilterId));
      });
    }

    applyFilters();
  }

  // Initialize and re-initialize filters
  function initializeFilters() {
    // Remove any existing event listeners to avoid duplicates
    document.querySelectorAll('.filter-btn').forEach(button => {
      // Clone to remove all event listeners
      const newButton = button.cloneNode(true);
      button.parentNode?.replaceChild(newButton, button);
    });

    document.getElementById('date-prev')?.replaceWith(document.getElementById('date-prev')?.cloneNode(true) as Node);
    document.getElementById('date-next')?.replaceWith(document.getElementById('date-next')?.cloneNode(true) as Node);

    // Re-add event listeners
    document.querySelectorAll('.filter-btn').forEach(button => {
      button.addEventListener('click', () => {
        const filterId = button.id.replace('filter-', '');
        handleFilterClick(filterId);
      });
    });

    // Re-add date navigation listeners
    document.getElementById('date-prev')?.addEventListener('click', () => {
      const date = new Date(currentDate);
      date.setDate(date.getDate() - 1);
      const newDateStr = date.toISOString().split('T')[0];
      loadMatchesForDate(newDateStr);
    });

    document.getElementById('date-next')?.addEventListener('click', () => {
      const date = new Date(currentDate);
      date.setDate(date.getDate() + 1);
      const newDateStr = date.toISOString().split('T')[0];
      loadMatchesForDate(newDateStr);
    });

    // Check URL parameters for initial date
    const urlParams = new URLSearchParams(window.location.search);
    const dateParam = urlParams.get('date');
    if (dateParam && dateParam !== currentDate) {
      currentDate = dateParam;
      updateDateDisplay(dateParam);
    }

    // Ensure UI reflects the correct state (e.g., disable next on today)
    updateDateDisplay(currentDate);

    applyFilters();
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', initializeFilters);

  // Re-initialize when content might have been refreshed
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
        // Check if filter buttons were added/replaced
        const hasFilterButtons = Array.from(mutation.addedNodes).some(node =>
          node.nodeType === Node.ELEMENT_NODE &&
          (node as Element).querySelector?.('.filter-btn')
        );

        if (hasFilterButtons) {
          setTimeout(initializeFilters, 50);
        }
      }
    });
  });

  // Watch for changes to the main content area
  const mainElement = document.querySelector('main');
  if (mainElement) {
    observer.observe(mainElement, { childList: true, subtree: true });
  }

  // Keyboard shortcuts
  document.addEventListener('keydown', (e) => {
    if (e.target && (e.target as HTMLElement).tagName === 'INPUT' || (e.target as HTMLElement).tagName === 'TEXTAREA') return;

    switch(e.key) {
      case 'ArrowLeft':
        e.preventDefault();
        document.getElementById('date-prev')?.click();
        break;
      case 'ArrowRight':
        e.preventDefault();
        document.getElementById('date-next')?.click();
        break;
      case '1':
        e.preventDefault();
        handleFilterClick('all');
        break;
      case '2':
        e.preventDefault();
        handleFilterClick('singles');
        break;
      case '3':
        e.preventDefault();
        handleFilterClick('doubles');
        break;
      case 'a':
      case 'A':
        e.preventDefault();
        handleFilterClick('atp');
        break;
      case 'w':
      case 'W':
        e.preventDefault();
        handleFilterClick('wta');
        break;
      case 'c':
      case 'C':
        e.preventDefault();
        handleFilterClick('challenger');
        break;
    }
  });
</script>

<style>
  .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }

  @keyframes pulse {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: .5;
    }
  }

  .filter-active {
    transform: scale(1.05);
  }
</style>
