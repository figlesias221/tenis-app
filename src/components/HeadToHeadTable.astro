---
import CountryFlag from "./CountryFlag.astro";
import type { HeadToHeadData, MatchSummary } from "@/lib/api/types";

interface Props {
  data: HeadToHeadData;
  playerId: string;
}

const { data, playerId } = Astro.props;

function formatDate(dateString: string): string {
  try {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  } catch {
    return dateString;
  }
}

function formatScore(match: MatchSummary): string {
  const scores = match.sport_event_status.period_scores;
  if (!scores || scores.length === 0) {
    return `${match.sport_event_status.home_score} - ${match.sport_event_status.away_score}`;
  }

  return scores.map(set => {
    const homeScore = set.home_score;
    const awayScore = set.away_score;
    let setScore = `${homeScore}-${awayScore}`;

    // Add tiebreak score if available
    if (set.home_tiebreak_score !== undefined && set.away_tiebreak_score !== undefined) {
      const tbHome = set.home_tiebreak_score;
      const tbAway = set.away_tiebreak_score;
      if (homeScore === 7 && awayScore === 6) {
        setScore += `(${tbHome}-${tbAway})`;
      } else if (homeScore === 6 && awayScore === 7) {
        setScore += `(${tbAway}-${tbHome})`;
      }
    }

    return setScore;
  }).join(', ');
}

function getMatchResult(match: MatchSummary, playerId: string): 'W' | 'L' | '-' {
  if (!match.sport_event_status.winner_id) return '-';
  return match.sport_event_status.winner_id === playerId ? 'W' : 'L';
}

function getOpponentInfo(match: MatchSummary, playerId: string) {
  const opponent = match.sport_event.competitors.find(c => c.id !== playerId);
  return opponent || match.sport_event.competitors[0];
}

function getPlayerRecord(matches: MatchSummary[], playerId: string): { wins: number, losses: number } {
  let wins = 0;
  let losses = 0;

  matches.forEach(match => {
    const result = getMatchResult(match, playerId);
    if (result === 'W') wins++;
    if (result === 'L') losses++;
  });

  return { wins, losses };
}

const record = getPlayerRecord(data.last_meetings, playerId);
const currentPlayer = data.competitors.find(c => c.id === playerId);
const opponent = data.competitors.find(c => c.id !== playerId);
---

<div class="bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-200 dark:border-gray-700 p-4">
  <h2 class="text-lg font-medium text-gray-900 dark:text-gray-100 mb-4">Head-to-Head Record</h2>

  {opponent ? (
    <div>
      <!-- Head-to-Head Summary -->
      <div class="bg-yellow-50 dark:bg-yellow-800/20 border border-yellow-200 dark:border-yellow-700 rounded p-4 mb-4">
        <div class="flex items-center justify-between">
          <div class="flex items-center gap-3">
            <CountryFlag
              countryCode={currentPlayer?.country_code || 'XX'}
              nationality={currentPlayer?.country || 'Unknown'}
              size="small"
            />
            <span class="text-sm font-medium text-gray-900 dark:text-gray-100">
              {currentPlayer?.name || 'Current Player'}
            </span>
          </div>

          <div class="text-center">
            <div class="text-2xl font-bold text-gray-900 dark:text-gray-100">
              {record.wins} - {record.losses}
            </div>
            <div class="text-xs text-gray-600 dark:text-gray-400">
              {data.last_meetings.length} matches
            </div>
          </div>

          <div class="flex items-center gap-3">
            <span class="text-sm font-medium text-gray-900 dark:text-gray-100">
              {opponent.name}
            </span>
            <CountryFlag
              countryCode={opponent.country_code}
              nationality={opponent.country}
              size="small"
            />
          </div>
        </div>
      </div>

      <!-- Recent Matches -->
      {data.last_meetings.length > 0 && (
        <div class="mb-4">
          <h3 class="text-md font-medium text-gray-900 dark:text-gray-100 mb-3">Recent Matches</h3>
          <div class="overflow-x-auto">
            <table class="w-full">
              <thead>
                <tr class="bg-yellow-50 dark:bg-yellow-900/30 border-b border-yellow-200 dark:border-yellow-700/50">
                  <th class="px-3 py-2 text-left text-xs font-medium text-gray-700 dark:text-gray-200">Date</th>
                  <th class="px-3 py-2 text-left text-xs font-medium text-gray-700 dark:text-gray-200">Tournament</th>
                  <th class="px-3 py-2 text-left text-xs font-medium text-gray-700 dark:text-gray-200">Round</th>
                  <th class="px-3 py-2 text-left text-xs font-medium text-gray-700 dark:text-gray-200">Score</th>
                  <th class="px-3 py-2 text-center text-xs font-medium text-gray-700 dark:text-gray-200">Result</th>
                </tr>
              </thead>
              <tbody class="divide-y divide-gray-100 dark:divide-gray-700">
                {data.last_meetings.slice(0, 10).map((match, index) => {
                  const result = getMatchResult(match, playerId);
                  const opponentInfo = getOpponentInfo(match, playerId);

                  return (
                    <tr class={`${index % 2 === 0 ? 'bg-white dark:bg-gray-800' : 'bg-gray-50 dark:bg-gray-900/50'} hover:bg-yellow-50 dark:hover:bg-yellow-900/20 transition-colors duration-150`}>
                      <td class="px-3 py-2 text-sm text-gray-900 dark:text-gray-100">
                        {formatDate(match.sport_event.start_time)}
                      </td>
                      <td class="px-3 py-2 text-sm text-gray-900 dark:text-gray-100">
                        <div>
                          <div class="font-medium">{match.sport_event.sport_event_context.competition.name}</div>
                          {match.sport_event.venue && (
                            <div class="text-xs text-gray-600 dark:text-gray-400">
                              {match.sport_event.venue.city_name}, {match.sport_event.venue.country_name}
                            </div>
                          )}
                        </div>
                      </td>
                      <td class="px-3 py-2 text-sm text-gray-600 dark:text-gray-400 capitalize">
                        {match.sport_event.sport_event_context.round.name.replace(/_/g, ' ')}
                      </td>
                      <td class="px-3 py-2 text-sm font-mono text-gray-900 dark:text-gray-100">
                        {formatScore(match)}
                      </td>
                      <td class="px-3 py-2 text-center">
                        <span class={`inline-block w-6 h-6 rounded-full text-xs font-bold text-white flex items-center justify-center ${
                          result === 'W'
                            ? 'bg-green-500 dark:bg-green-600'
                            : result === 'L'
                              ? 'bg-red-500 dark:bg-red-600'
                              : 'bg-gray-400 dark:bg-gray-500'
                        }`}>
                          {result}
                        </span>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>

          {data.last_meetings.length > 10 && (
            <div class="mt-3 text-center">
              <span class="text-sm text-gray-600 dark:text-gray-400">
                Showing 10 of {data.last_meetings.length} matches
              </span>
            </div>
          )}
        </div>
      )}

      <!-- Upcoming Matches -->
      {data.next_meetings.length > 0 && (
        <div>
          <h3 class="text-md font-medium text-gray-900 dark:text-gray-100 mb-3">Upcoming Matches</h3>
          <div class="overflow-x-auto">
            <table class="w-full">
              <thead>
                <tr class="bg-blue-50 dark:bg-blue-900/30 border-b border-blue-200 dark:border-blue-700/50">
                  <th class="px-3 py-2 text-left text-xs font-medium text-gray-700 dark:text-gray-200">Date</th>
                  <th class="px-3 py-2 text-left text-xs font-medium text-gray-700 dark:text-gray-200">Tournament</th>
                  <th class="px-3 py-2 text-left text-xs font-medium text-gray-700 dark:text-gray-200">Round</th>
                  <th class="px-3 py-2 text-center text-xs font-medium text-gray-700 dark:text-gray-200">Status</th>
                </tr>
              </thead>
              <tbody class="divide-y divide-gray-100 dark:divide-gray-700">
                {data.next_meetings.map((match, index) => (
                  <tr class={`${index % 2 === 0 ? 'bg-white dark:bg-gray-800' : 'bg-gray-50 dark:bg-gray-900/50'} hover:bg-blue-50 dark:hover:bg-blue-900/20 transition-colors duration-150`}>
                    <td class="px-3 py-2 text-sm text-gray-900 dark:text-gray-100">
                      {formatDate(match.sport_event.start_time)}
                    </td>
                    <td class="px-3 py-2 text-sm text-gray-900 dark:text-gray-100">
                      <div>
                        <div class="font-medium">{match.sport_event.sport_event_context.competition.name}</div>
                        {match.sport_event.venue && (
                          <div class="text-xs text-gray-600 dark:text-gray-400">
                            {match.sport_event.venue.city_name}, {match.sport_event.venue.country_name}
                          </div>
                        )}
                      </div>
                    </td>
                    <td class="px-3 py-2 text-sm text-gray-600 dark:text-gray-400 capitalize">
                      {match.sport_event.sport_event_context.round.name.replace(/_/g, ' ')}
                    </td>
                    <td class="px-3 py-2 text-center">
                      <span class="inline-block bg-blue-100 dark:bg-blue-800 text-blue-800 dark:text-blue-200 px-2 py-1 rounded text-xs font-medium capitalize">
                        {match.sport_event_status.status.replace(/_/g, ' ')}
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}
    </div>
  ) : (
    <div class="text-center py-8">
      <p class="text-gray-600 dark:text-gray-400">No head-to-head data available.</p>
    </div>
  )}
</div>