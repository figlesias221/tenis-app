---
import type { Rankings } from "@/lib/api/types";
import CountryFlag from "./CountryFlag.astro";
import { imageService } from "@/lib/utils/image-service";

export interface Props {
  rankings: Rankings;
  currentPage?: number;
  pageSize?: number;
}

const { rankings, currentPage = 1, pageSize = 100 } = Astro.props;

// Get current URL params to preserve other parameters like type
const urlParams = new URLSearchParams(Astro.url.search);
const rankingType = urlParams.get('type') || 'ATP';

// Helper function to build pagination URLs
const buildPageUrl = (page: number) => {
  const newParams = new URLSearchParams(urlParams);
  newParams.set('page', page.toString());
  return `?${newParams.toString()}`;
};

// Calculate pagination
const totalPlayers = rankings.rankings.length;
const totalPages = Math.ceil(totalPlayers / pageSize);
const startIndex = (currentPage - 1) * pageSize;
const endIndex = startIndex + pageSize;
const currentRankings = rankings.rankings.slice(startIndex, endIndex);

// Generate page numbers for pagination
const getPageNumbers = () => {
  const maxPages = Math.min(5, totalPages);
  const pages = [];

  if (totalPages <= 5) {
    for (let i = 1; i <= totalPages; i++) {
      pages.push(i);
    }
  } else if (currentPage <= 3) {
    for (let i = 1; i <= 5; i++) {
      pages.push(i);
    }
  } else if (currentPage >= totalPages - 2) {
    for (let i = totalPages - 4; i <= totalPages; i++) {
      pages.push(i);
    }
  } else {
    for (let i = currentPage - 2; i <= currentPage + 2; i++) {
      pages.push(i);
    }
  }

  return pages;
};

const pageNumbers = getPageNumbers();

// Generate avatar URLs for current page players
const playersWithAvatars = currentRankings.map(entry => {
  const player = entry.player;
  const colors = imageService.getColorVariation(rankings.type, entry.rank);
  const avatarUrl = imageService.getPlayerImageUrl(player, {
    size: 80,
    backgroundColor: colors.backgroundColor,
    textColor: colors.textColor,
    rounded: true
  });

  return {
    ...entry,
    player: {
      ...player,
      avatarUrl
    }
  };
});
---

<div class="space-y-4">
  <div class="flex justify-end mb-4">
    <div class="flex flex-col items-end gap-1">
      {rankings.week && rankings.year && (
        <p class="text-sm font-medium text-gray-700 dark:text-gray-300">
          Week {rankings.week}, {rankings.year}
        </p>
      )}
      <p class="text-xs text-gray-500 dark:text-gray-400">
        {new Date(rankings.lastUpdated).toLocaleDateString()}
      </p>
    </div>
  </div>

  <!-- Mobile Card View -->
  <div class="block sm:hidden space-y-3">
    {playersWithAvatars.map((entry, index) => (
      <div class="card-elevated p-4">
        <div class="flex items-start gap-4 mb-3">
          <div class="flex-shrink-0">
            <div class="relative">
              <img
                src={entry.player.avatarUrl}
                alt={`${entry.player.name} avatar`}
                class="w-16 h-16 rounded-full border-2 border-surface-200 dark:border-surface-700"
                loading="lazy"
              />
              <div class="absolute -bottom-1 -right-1">
                <CountryFlag
                  countryCode={entry.player.countryCode}
                  nationality={entry.player.nationality}
                  size="small"
                />
              </div>
            </div>
          </div>

          <div class="flex-1 min-w-0">
            <div class="flex items-center justify-between mb-2">
              <span class="text-2xl font-bold text-tennis-600 dark:text-tennis-400 bg-tennis-50 dark:bg-tennis-950/30 px-2 py-1 rounded-lg">
                #{entry.rank}
              </span>
              {entry.movement !== undefined && (
                <span class={`text-sm font-medium px-2 py-1 rounded ${
                  entry.movement > 0
                    ? 'text-green-700 bg-green-50 dark:text-green-400 dark:bg-green-900/30'
                    : entry.movement < 0
                      ? 'text-red-700 bg-red-50 dark:text-red-400 dark:bg-red-900/30'
                      : 'text-gray-500 dark:text-gray-400'
                }`}>
                  {entry.movement > 0 && "↑"}
                  {entry.movement < 0 && "↓"}
                  {entry.movement === 0 && "—"}
                  {entry.movement !== 0 && Math.abs(entry.movement)}
                </span>
              )}
            </div>

            <div class="space-y-2">
              <div>
                <a
                  href={`/player/${entry.player.id}`}
                  class="font-semibold text-lg text-tennis-700 dark:text-tennis-300 hover:text-tennis-800 dark:hover:text-tennis-200 hover:underline"
                >
                  {entry.player.name}
                </a>
                {entry.player.abbreviation && (
                  <span class="ml-2 text-xs bg-surface-100 dark:bg-surface-700 text-surface-600 dark:text-surface-400 px-2 py-1 rounded">
                    {entry.player.abbreviation}
                  </span>
                )}
              </div>
              <div class="flex justify-between items-center text-sm">
                <span class="text-surface-600 dark:text-surface-400">{entry.player.nationality}</span>
                <div class="text-right">
                  <div class="font-bold text-surface-900 dark:text-surface-100">{entry.points.toLocaleString()} pts</div>
                  <div class="text-xs text-surface-500 dark:text-surface-400">{entry.competitionsPlayed || '—'} tournaments</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    ))}
  </div>

  <!-- Desktop Table View -->
  <div class="hidden sm:block card overflow-hidden">
    <div class="overflow-x-auto">
      <table class="w-full">
        <thead>
          <tr class="bg-tennis-50 dark:bg-tennis-950/30 border-b border-tennis-200 dark:border-tennis-700/50">
            <th class="px-3 py-3 text-left text-xs font-semibold text-surface-700 dark:text-surface-200 uppercase tracking-wider">Rank</th>
            <th class="px-3 py-3 text-left text-xs font-semibold text-surface-700 dark:text-surface-200 uppercase tracking-wider">Player</th>
            <th class="px-3 py-3 text-left text-xs font-semibold text-surface-700 dark:text-surface-200 uppercase tracking-wider">Country</th>
            <th class="px-3 py-3 text-right text-xs font-semibold text-surface-700 dark:text-surface-200 uppercase tracking-wider">Points</th>
            <th class="px-3 py-3 text-center text-xs font-semibold text-surface-700 dark:text-surface-200 uppercase tracking-wider">Movement</th>
            <th class="px-3 py-3 text-center text-xs font-semibold text-surface-700 dark:text-surface-200 uppercase tracking-wider">Tournaments</th>
          </tr>
        </thead>
        <tbody class="divide-y divide-surface-100 dark:divide-surface-700">
          {playersWithAvatars.map((entry, index) => (
            <tr class={`group ${index % 2 === 0 ? 'bg-surface-50 dark:bg-surface-800' : 'bg-surface-100 dark:bg-surface-900/50'} hover:bg-tennis-50 dark:hover:bg-tennis-900/20 transition-colors duration-150`}>
              <td class="px-3 py-3">
                <span class={`inline-flex items-center justify-center w-8 h-8 rounded font-bold text-sm ${
                  entry.rank <= 10
                    ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/50 dark:text-yellow-200'
                    : 'text-gray-900 dark:text-gray-100'
                }`}>
                  {entry.rank}
                </span>
              </td>
              <td class="px-3 py-4">
                <div class="flex items-center gap-3">
                  <div class="flex-shrink-0">
                    <img
                      src={entry.player.avatarUrl}
                      alt={`${entry.player.name} avatar`}
                      class="w-10 h-10 rounded-full border border-surface-200 dark:border-surface-600"
                      loading="lazy"
                    />
                  </div>
                  <div class="min-w-0 flex-1">
                    <a
                      href={`/player/${entry.player.id}`}
                      class="font-semibold text-yellow-700 dark:text-yellow-300 hover:text-yellow-800 dark:hover:text-yellow-200 hover:underline transition-colors group-hover:underline"
                      title={`View ${entry.player.name}'s profile`}
                    >
                      {entry.player.name}
                    </a>
                    {entry.player.abbreviation && (
                      <div class="text-xs text-gray-500 dark:text-gray-400 font-medium mt-0.5">
                        {entry.player.abbreviation}
                      </div>
                    )}
                  </div>
                </div>
              </td>
              <td class="px-3 py-3">
                <div class="flex items-center gap-2">
                  <CountryFlag
                    countryCode={entry.player.countryCode}
                    nationality={entry.player.nationality}
                    size="small"
                  />
                  <span class="text-sm text-gray-600 dark:text-gray-300 hidden lg:block">{entry.player.nationality}</span>
                </div>
              </td>
              <td class="px-3 py-3 text-right">
                <span class="font-bold text-gray-900 dark:text-gray-100">
                  {entry.points.toLocaleString()}
                </span>
              </td>
              <td class="px-3 py-3 text-center">
                {entry.movement !== undefined && (
                  <span class={`inline-flex items-center justify-center w-12 h-6 rounded-full text-xs font-bold ${
                    entry.movement > 0
                      ? 'bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-200'
                      : entry.movement < 0
                        ? 'bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-200'
                        : 'text-gray-500 dark:text-gray-400'
                  }`}>
                    {entry.movement > 0 && "↑"}
                    {entry.movement < 0 && "↓"}
                    {entry.movement === 0 && "—"}
                    {entry.movement !== 0 && Math.abs(entry.movement)}
                  </span>
                )}
              </td>
              <td class="px-3 py-3 text-center">
                <span class="text-sm text-gray-600 dark:text-gray-300">
                  {entry.competitionsPlayed || '—'}
                </span>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  </div>

  <!-- Pagination Controls -->
  {totalPages > 1 && (
    <div class="mt-8 flex flex-col sm:flex-row items-center justify-between gap-4">
      <div class="text-sm text-surface-600 dark:text-surface-400">
        Showing {startIndex + 1}-{Math.min(endIndex, totalPlayers)} of {totalPlayers.toLocaleString()} players
      </div>

      <div class="flex items-center gap-2">
        <!-- Previous Button -->
        {currentPage > 1 && (
          <a
            href={buildPageUrl(currentPage - 1)}
            class="inline-flex items-center px-3 py-2 text-sm font-medium text-surface-700 dark:text-surface-300 bg-surface-100 dark:bg-surface-700 border border-surface-300 dark:border-surface-600 rounded-lg hover:bg-surface-200 dark:hover:bg-surface-600 transition-colors"
          >
            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
            </svg>
            Previous
          </a>
        )}

        <!-- Page Numbers -->
        {pageNumbers.map(pageNum => (
          <a
            href={buildPageUrl(pageNum)}
            class={`inline-flex items-center px-3 py-2 text-sm font-medium border rounded-lg transition-colors ${
              pageNum === currentPage
                ? 'bg-tennis-500 text-white border-tennis-500'
                : 'text-surface-700 dark:text-surface-300 bg-surface-100 dark:bg-surface-700 border-surface-300 dark:border-surface-600 hover:bg-surface-200 dark:hover:bg-surface-600'
            }`}
          >
            {pageNum}
          </a>
        ))}

        <!-- Next Button -->
        {currentPage < totalPages && (
          <a
            href={buildPageUrl(currentPage + 1)}
            class="inline-flex items-center px-3 py-2 text-sm font-medium text-surface-700 dark:text-surface-300 bg-surface-100 dark:bg-surface-700 border border-surface-300 dark:border-surface-600 rounded-lg hover:bg-surface-200 dark:hover:bg-surface-600 transition-colors"
          >
            Next
            <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
          </a>
        )}
      </div>
    </div>
  )}
</div>


<style>
  table {
    font-variant-numeric: tabular-nums;
  }
</style>