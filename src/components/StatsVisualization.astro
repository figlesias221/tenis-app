---
import type { CompetitorProfile } from "@/lib/api/types";

export interface Props {
  profile: CompetitorProfile;
  tourType: 'ATP' | 'WTA';
}

const { profile, tourType } = Astro.props;

const SURFACE_NAMES: Record<string, string> = {
  'hard_court': 'Hard',
  'grass': 'Grass',
  'red_clay': 'Clay',
  'green_clay': 'Clay',
  'hardcourt_outdoor': 'Hard',
  'carpet_indoor': 'Carpet',
  'synthetic_indoor': 'Synthetic',
  'synthetic_outdoor': 'Synthetic',
  'hardcourt_indoor': 'Hard',
  'red_clay_indoor': 'Clay',
  'unknown': 'Unknown',
  'synthetic_grass': 'Grass'
};

function getSurfaceName(surfaceType: string): string {
  return SURFACE_NAMES[surfaceType] || surfaceType;
}

function getSurfaceIcon(surfaceType: string): string {
  if (surfaceType.includes('hard')) return 'üü¶';
  if (surfaceType.includes('grass')) return 'üü©';
  if (surfaceType.includes('clay')) return 'üü´';
  return '‚ö™';
}
---

<div class="bg-white dark:bg-surface-900 rounded-lg border border-surface-200 dark:border-surface-700 p-4">
  <h3 class="font-semibold text-surface-900 dark:text-surface-100 mb-3">
    {profile.periods[0]?.year || 'Current'} Season Stats
  </h3>

  {profile.periods[0]?.surfaces.length > 0 ? (
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3">
      {profile.periods[0].surfaces.map((surface) => {
        const { matches_played, matches_won, competitions_won } = surface.statistics;
        const winPercentage = matches_played > 0 ? Math.round((matches_won / matches_played) * 100) : 0;
        const losses = matches_played - matches_won;

        return (
          <div class="bg-surface-50 dark:bg-surface-800 rounded-lg p-3 hover:bg-surface-100 dark:hover:bg-surface-700 transition-colors">
            <div class="flex items-center justify-between mb-2">
              <div class="flex items-center gap-2">
                <span class="text-lg">{getSurfaceIcon(surface.type)}</span>
                <span class="font-medium text-sm text-surface-900 dark:text-surface-100">
                  {getSurfaceName(surface.type)}
                </span>
              </div>
              {competitions_won > 0 && (
                <div class="flex items-center gap-1">
                  <span class="text-xs font-semibold text-yellow-600">{competitions_won}</span>
                  <span class="text-sm">üèÜ</span>
                </div>
              )}
            </div>

            <div class="flex items-center justify-between text-sm">
              <span class="font-semibold text-surface-900 dark:text-surface-100">
                {matches_won}-{losses}
              </span>
              <span class={`font-bold ${
                winPercentage >= 70 ? 'text-green-600' :
                winPercentage >= 50 ? 'text-tennis-600' : 'text-red-600'
              }`}>
                {winPercentage}%
              </span>
            </div>

            {/* Progress bar */}
            <div class="mt-2 w-full bg-surface-200 dark:bg-surface-600 rounded-full h-1">
              <div
                class={`h-1 rounded-full ${
                  winPercentage >= 70 ? 'bg-green-500' :
                  winPercentage >= 50 ? 'bg-tennis-500' : 'bg-red-500'
                }`}
                style={`width: ${winPercentage}%`}
              ></div>
            </div>
          </div>
        );
      })}
    </div>
  ) : (
    <p class="text-surface-500 dark:text-surface-400 text-sm text-center py-4">
      No statistics available
    </p>
  )}
</div>