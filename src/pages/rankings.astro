---
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import RankingsTable from "@/components/RankingsTable.astro";
import { tennisApi } from "@/lib/api/tennisApi";

// Get the ranking type from URL params, default to ATP
const rankingType = (Astro.url.searchParams.get('type') || 'ATP').toUpperCase() as 'ATP' | 'WTA';

// Get current page from URL params, default to 1
const currentPage = parseInt(Astro.url.searchParams.get('page') || '1');

// Get selected date from URL params
const selectedDate = Astro.url.searchParams.get('date') || undefined;

let rankings;
let error;
let availableDates: string[] = [];
let availableYears: number[] = [];

try {
  // Get available dates and years for selection
  availableDates = await tennisApi.getAvailableRankingDates();
  availableYears = await tennisApi.getAvailableRankingYears();

  if (rankingType === 'WTA') {
    rankings = await tennisApi.getWTARankings(undefined, selectedDate);
  } else {
    rankings = await tennisApi.getATPRankings(undefined, selectedDate);
  }
} catch (e) {
  error = e instanceof Error ? e.message : "Failed to load rankings";
  console.error("Rankings page error:", e);
}
---

<Layout title={`${rankingType} Rankings - Tennis Live`} description={`Live ${rankingType} Rankings - All Players`}>
  <Header />

  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Page Header -->
    <div class="text-center mb-8">
      <div class="flex flex-col sm:flex-row items-center justify-center gap-4 mb-4">
        <div class="inline-flex items-center gap-3">
          <span class="text-4xl" aria-hidden="true">üìä</span>
          <h1 class="text-heading-2">{rankingType} Rankings</h1>
        </div>

        <!-- Tour Toggle -->
        <div class="toggle-container">
          <a
            href="/rankings?type=ATP"
            class={`toggle-item ${
              rankingType === 'ATP'
                ? 'toggle-item-active-atp'
                : 'toggle-item-inactive'
            }`}
          >
            ATP
          </a>
          <a
            href="/rankings?type=WTA"
            class={`toggle-item ${
              rankingType === 'WTA'
                ? 'toggle-item-active-wta'
                : 'toggle-item-inactive'
            }`}
          >
            WTA
          </a>
        </div>
      </div>
      <p class="text-body-large max-w-4xl mx-auto">
        All ranked players worldwide - Live rankings updated regularly
      </p>

      <!-- Historical Rankings Selectors -->
      <div class="mt-6 max-w-2xl mx-auto">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">

          <!-- Year Selector -->
          {availableYears.length > 1 && (
            <div>
              <label for="ranking-year" class="block text-sm font-medium text-surface-700 dark:text-surface-300 mb-2">
                Select Year
              </label>
              <select
                id="ranking-year"
                class="w-full px-4 py-2 bg-surface-100 dark:bg-surface-800 border border-surface-300 dark:border-surface-600 rounded-xl text-surface-900 dark:text-surface-100 focus:outline-none focus:border-tennis-500 focus:ring-2 focus:ring-tennis-200 dark:focus:ring-tennis-800 transition-all duration-200"
              >
                {availableYears.map(year => (
                  <option value={year} selected={selectedDate?.startsWith(year.toString())}>
                    {year} {year === Math.max(...availableYears) ? '(Latest)' : ''}
                  </option>
                ))}
              </select>
            </div>
          )}

          <!-- Date Selector -->
          {availableDates.length > 0 && (
            <div>
              <label for="ranking-date" class="block text-sm font-medium text-surface-700 dark:text-surface-300 mb-2">
                Select Ranking Date
              </label>
              <select
                id="ranking-date"
                class="w-full px-4 py-2 bg-surface-100 dark:bg-surface-800 border border-surface-300 dark:border-surface-600 rounded-xl text-surface-900 dark:text-surface-100 focus:outline-none focus:border-tennis-500 focus:ring-2 focus:ring-tennis-200 dark:focus:ring-tennis-800 transition-all duration-200"
              >
                <option value="">Latest Rankings</option>
                {availableDates.map(date => (
                  <option value={date} selected={date === selectedDate}>
                    {new Date(date.slice(0,4) + '-' + date.slice(4,6) + '-' + date.slice(6,8)).toLocaleDateString('en-US', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric'
                    })}
                  </option>
                ))}
              </select>
            </div>
          )}

        </div>

        {availableYears.length > 1 && (
          <p class="text-xs text-surface-500 dark:text-surface-400 mt-3 text-center">
            Historical rankings available: {availableYears.join(', ')}
          </p>
        )}
      </div>
    </div>

      {error ? (
        <div class="card bg-red-50 dark:bg-red-950/20 border-red-200 dark:border-red-800 p-6 text-center max-w-md mx-auto">
          <div class="text-4xl mb-4">‚ö†Ô∏è</div>
          <h3 class="text-lg font-semibold text-red-800 dark:text-red-200 mb-2">Error Loading Rankings</h3>
          <p class="text-red-600 dark:text-red-300 mb-4">{error}</p>
          <button
            onclick="window.location.reload()"
            class="btn-outline"
          >
            Try Again
          </button>
        </div>
      ) : rankings ? (
        <RankingsTable rankings={rankings} currentPage={currentPage} />
      ) : (
        <div class="text-center py-12">
          <div class="inline-block h-8 w-8 animate-spin rounded-full border-4 border-tennis-400 border-r-transparent mb-4"></div>
          <p class="text-body">Loading rankings...</p>
        </div>
      )}
    </div>
  </div>

  <script>
    // Handle date and year selection
    const dateSelector = document.getElementById('ranking-date') as HTMLSelectElement;
    const yearSelector = document.getElementById('ranking-year') as HTMLSelectElement;

    function updateRankings() {
      const url = new URL(window.location.href);

      if (dateSelector) {
        const selectedDate = dateSelector.value;
        if (selectedDate) {
          url.searchParams.set('date', selectedDate);
        } else {
          url.searchParams.delete('date');
        }
      }

      // Reset to page 1 when changing date/year
      url.searchParams.delete('page');

      window.location.href = url.toString();
    }

    if (dateSelector) {
      dateSelector.addEventListener('change', updateRankings);
    }

    if (yearSelector) {
      yearSelector.addEventListener('change', async (e) => {
        const selectedYear = (e.target as HTMLSelectElement).value;

        // When year changes, we need to load new dates for that year
        // For now, just clear the date and let the server handle it
        if (dateSelector) {
          dateSelector.value = '';
        }

        updateRankings();
      });
    }
  </script>
</Layout>